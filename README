**xv6-shm-manager** üêßüîó

[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)  [![CI Status](https://github.com/YOUR_USERNAME/xv6-shm-manager/actions/workflows/ci.yml/badge.svg)](https://github.com/YOUR_USERNAME/xv6-shm-manager/actions)

---

> *"Unlocking high-speed IPC in xv6: share once, access anywhere."*

---

## üìñ Table of Contents

1. [‚ú® Highlights](#‚ú®-highlights)
2. [üöÄ Quick Start](#üöÄ-quick-start)
3. [üõ†Ô∏è Features](#üõ†Ô∏è-features)
4. [üîç Architecture Overview](#üîç-architecture-overview)
5. [‚öôÔ∏è Usage & Examples](#‚öôÔ∏è-usage--examples)
6. [üìà Performance Benchmarks](#üìà-performance-benchmarks)
7. [üìö API Reference](#üìö-api-reference)
8. [ü§ù Contributing](#ü§ù-contributing)
9. [üìÑ License](#üìÑ-license)

---

## ‚ú® Highlights

* **POSIX‚Äëlike SHM in xv6**: Four seamless syscalls enabling global, named memory objects.
* **Zero-copy IPC**: Processes share pages directly‚Äîno pipes, no sockets.
* **Copy-on-Fork semantics**: Child processes inherit mappings transparently.
* **Strict limits & safety**: 64 objects max, 32 pages each; robust error handling.

---

## üöÄ Quick Start

```bash
# 1. Clone repository
git clone https://github.com/YOUR_USERNAME/xv6-shm-manager.git
cd xv6-shm-manager

# 2. Build xv6 with SHM support
make clean && make

# 3. Launch emulator and test
make qemu-nox
# In xv6 shell:
shmtest foo 8192 4  # creates "foo", truncates to 8 KB, maps & verifies data
```

---

## üõ†Ô∏è Features

| Feature                     | Description                                              |
| --------------------------- | -------------------------------------------------------- |
| **Global SHM Registry**     | Up to 64 named objects, shareable by name across PIDs    |
| **Resizable at Init**       | `shm_trunc` sets size once; subsequent calls fail safely |
| **Per-Process Descriptors** | Max 16 open objects per process                          |
| **Flags-based Mapping**     | `O_RDONLY` or `O_RDWR` mappings                          |
| **Automatic Cleanup**       | `shm_close` + `exit()` handle unmapping & GC             |

---

## üîç Architecture Overview

**Flow of Shared Memory Operations:**

1. **shm\_open("foo")**

   * Process A calls `shm_open("foo")`.
   * Kernel looks in **SharedMemoryTable** (global array of 64 slots).
   * If entry for "foo" exists, returns descriptor; otherwise creates new slot.

2. **shm\_trunc(fd, size)**

   * Process A calls `shm_trunc` on its descriptor.
   * Kernel checks that this is the first truncate and allocates pages (up to 32).
   * Returns the actual size in pages, or -1 on error.

3. **shm\_map(fd, \&va, flags)**

   * Process A calls `shm_map` to map the object.
   * Kernel finds the object, picks a free virtual address region (e.g. `0x400000`).
   * Updates Process A's page tables; returns 0 on success.

4. **fork()**

   * Process A forks to create Process B (Child A).
   * Child inherits open descriptors and existing mappings automatically.

5. **shm\_close(fd)**

   * When a process calls `shm_close`, its descriptor is removed and mapping is undone.
   * If no other processes have it open, the kernel frees the shared object slot.

**Key Data Structures:**

* **SharedMemoryTable**: Global structure with up to 64 named entries:

  * `name`: string identifier
  * `size`: number of pages
  * `ref_count`: number of opens (across processes)

* **Per-Process Descriptor Table**: In each `proc` structure, tracks up to 16 open SHM objects:

  * Maps `shm_fd` ‚Üí pointer to SharedMemoryTable entry
  * Flags and mapping address info

---

## ‚öôÔ∏è Usage & Examples

```c
// User program: share.c
#include "types.h"
#include "user.h"

int main() {
  int fd = shm_open("shared_buf");
  shm_trunc(fd, 4096);
  void *ptr;
  shm_map(fd, &ptr, O_RDWR);
  // write to shared memory
  strcpy(ptr, "Hello from PID %d!\n", getpid());
  shm_close(fd);
  exit();
}
```

* Compile: `gcc share.c -o share`
* Run in xv6: `share && fork-receiver`

---

## üìà Performance Benchmarks

![Scaling Graph](docs/performance.png)

> **Results**: Throughput scales from \~100 ops/sec at 1 process to \~500 ops/sec at 16 processes.

*Source data in* `docs/performance.csv`

---

## üìö API Reference

| Syscall     | Prototype                                        | Success Return | Error Return |
| ----------- | ------------------------------------------------ | -------------- | ------------ |
| `shm_open`  | `int shm_open(char *name);`                      | `fd ‚â• 0`       | `-1`         |
| `shm_trunc` | `int shm_trunc(int shm_od, int size);`           | `actual_size`  | `-1`         |
| `shm_map`   | `int shm_map(int shm_od, void **va, int flags);` | `0`            | `-1`         |
| `shm_close` | `int shm_close(int shm_od);`                     | `0`            | `-1`         |

---

## ü§ù Contributing

1. Fork the repo
2. Create feature branch (`git checkout -b feat/awesome`)
3. Commit changes (`git commit -m "feat: add ..."`)
4. Push branch and open PR

Please follow the [Code of Conduct](CODE_OF_CONDUCT.md).

---

## üìÑ License

This project is MIT licensed; see [LICENSE](LICENSE) for details.
